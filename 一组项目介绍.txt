小组组长：吴华2023051604096
小组成员：陈海洪2023051604099 叶涵于2023051604111
AppDir里面打包好了库AppDir/user/bin里面可以直接运行appgame
本项目的游戏框架为小组独立设计，在设计和技术上为原创，在素材方面使用了Supertux 2里面的素材然后合成的精灵图

游戏框架为3个部分，Main.qml用于连接游戏界面和主界面UI，GM_GameView.qml作为游戏界面，UI_MainMenu.qml作为主界面。

在实现拓展功能网络编程的时候，初步实现时，因为人物动作卡顿严重，加上项目原本功能为实现完全，最终放弃。


叶涵予负责的板块
涉猎部分：

Background.qml：使用图片组件image,用于设置游戏的背景图片

BGM_MainSet.qml：
1.代码介绍：
MediaPlayer组件用于设置音乐和特性，volume的值是0到1,因此在这里实际需要除100,Component.onCompleted里面播放和停止的操作用于将音乐加载到内存中，避免游戏开始后播放对应的音效会导致卡顿。同时相比于SoundEffect组件，MediaPlayer组件是并行播放，而SoundEffect是串行，会卡顿。在所有音乐组件下面有一系列的function,处理了当同一个音效多次触发时，需要停止音乐并且重新播放。
2.介绍：
BGM_Main.qml是用于控制整个游戏的音乐的，如何控制音乐的部分都在这里修改，对音量的控制，这里也进行了操作，因为主音量是控制整体的音量，所以音效和背景音乐都要乘主音量除100


GM_GameView.qml：
1.介绍：
GM_GameView作为整个项目的游戏核心部分，所有游戏画面内容都在这里显示和设置，地图，人物都会放到这里面，同时这里还显示了整个游戏的碰撞逻辑检测和处理。
2.代码介绍：
一、计分机制：
游戏计分有两部分，最大距离和捡的金币数量，只有超过最大距离分数才会上升、每捡一个金币获得2.5的积分。
二、显示：
游戏界面显示包括：获得金币的数量，得分，设置，人物生命，人物技能，人物状态
玩家视角为GM_GameView.qml的大小，它为最顶层，人物在中层，地图在最下面一层，因为地图很大，所以当我们移动的时候，实际上是在移动地图的x坐标。
三、作为游戏主体的容器：
所有关于游戏的载体、人物、地图、怪物都会放到这里，包括死亡动画。同时有关所有的碰撞都在这里实现，包括人物与怪物碰撞、人物与平台碰撞、人物与道具碰撞、技能与怪物碰撞。GM_GameView.qml中的timer作为整个游戏的时间系统，需要放入所有有关时间的操作，当人物死亡时，会跳过这里的碰撞逻辑。同时跳过repeater来实时获得人物技能和状态属性是否有变化并且显示出来。（ps：使用repeater必须使用ListModel,因为listmodel作为一个qml内置的组件，可以时刻监听值的改变，如果单纯使用数组，则无法时刻检测）
四、碰撞检测实现：
碰撞通过获得对应实体的Qt.rect，检测两个矩形是否有相交，并且做出相应的操作。因为地图由多个块组成，并且怪物、道具也有多个，所以每个检测都通过循环便利每个孩子来检测。人物碰撞检测分为四个方向，上下左右的碰撞，因此检测时需要对四个方向进行检测。判断碰撞检测条件跳过对应的四个方向的rect函数来检测。


Main.qml:
1.介绍：
作为连接游戏和主界面的通道，里面有关于存档、金币、分数的设置，还有关于游戏初始化，主界面设置的操作。
2.代码介绍：
一、保存：
Settings组件用于保存，需要使用库Qt.labs.settings,（新版的保存组件无法显示保存的文件位置，因此不使用）每当保存的对应数据发生改变，就会进行保存。启动程序的时候首先会找到保存的数据，如果未找到就是0
二、初始化:
启动游戏的时候，会将有关音乐和游戏画面、主界面的显示和数值进行初始化操作。


Player_Dead_Amination.qml:
1.介绍：
设置人物的死亡动画，死亡的黑屏效果使用Rectangle通过设置透明度来实现，人物的死亡动画通过SequentialAnimation来进行顺序播放，当人物死亡时，玩家无法操作，同时所有碰撞逻辑都会跳过。
2.代码：
当人物死亡后，会在人物组件和游戏界面组件中跳过所有逻辑，保持死亡动画能够顺利执行，死亡的黑屏和黑屏的消失单独设计，死亡黑屏后会将人物重置位置，随后才会执行黑屏消失代码。


Player_Skill.qml:
1.介绍：
设置技能方面的所有东西，包括：技能精灵图位置、每个技能的持续时间、冷却时间。
2.代码：
每个技能都需要独立的设置Timer,Timer包括技能持续时间和技能冷却时间，当一个技能释放后，就会开启冷却的计算时间同时技能无法释放，当冷却时间的timer执行时，就会重新开放技能，玩家释放技能时，都会先判断人物是否有这个技能，其次判断这个技能是否可以释放。技能还会获取人物释放技能时的方向，根据方向的不同改变技能的位置、技能精灵图的位置、技能的碰撞面积。通过升级人物的技能冷却，可以实现技能冷却的Timer的interval降低，使技能冷却降低。
3.技能实现：
目前有两个技能，一个是静态技能，一个是动态技能。前者释放后会在人物前方出现一个矩形碰撞面积，这个碰撞面积是立刻生成并且起作用。后者是动态技能，释放后会先出现小部分的碰撞面积（可以忽略）随后改变碰撞面积大小，实现延迟碰撞，这就需要额外设置timer。攻击型技能因为是一次性的，所以使用动态创建Qt.createComponent用于知道组件，createObject用于创建实例，技能的删除时机为技能特效结束后删除。

Player.qml：
1.介绍：
人物作为玩家可操控的角色，在Player组件里面实现了人物的速度、人物的精灵图设置、人物的技能和状态的增加和删除、人物的碰撞面积设置
2.代码：
一、人物移动：
为了实现人物的移动，人物移动采用加速器的设置，当先左右移动的时候，会给予人物加速度，通过加速度来改变玩家的速度，设置最大速度来限制玩家速度无限增加，当玩家没有移动操作的时候，启动计时器Timer,如果当num大于某个值的时候说明此时玩家没有操控角色，此时会让人物获得减速加速度，使人物慢慢变慢，同理这里改变的是人物的加速度，没有直接改变速度，人物的y轴移动同理。就是通过改变人物的加速度，通过加速度改变人物的速度，以及设置人物停止的减速加速度，使得人物的动作更加灵动。
三、人物的碰撞：
人物有四个方向的碰撞设置，通过CheckCollision.qml组件：上下左右碰撞。之所以设置四个方向，是因为在处理具体的人物情况的时候，各个方向碰撞后的处理逻辑可能不同，因此分开设计更直观，但是这样也增加了代码量，使得代码冗余复杂。人物的碰撞设置在人物框之外的上下左右，而不是设置在人物内部。
四、按键处理：
按键处理使用pressed.add（）和pressed.has,之所以没有使用event是因为event用来处理单个按键，当如果需要多个按键一起时，event无法实现，所以这里使用pressed。
五、添加删除技能和状态：
人物的技能状态通过addSkill和addState来进行添加，人物的技能和状态使用listmodel容器实时检测，如果想要改变容器内部的数据，需要使用setPorperty,否则容器内的元素值无法改变，这也就会导致显示的技能和状态效果的冷却时间出错。
人物状态改变人物属性的时候，通过加法和减法来实现，如果存在这个状态就加上对应的数值到人物的身上。
六、人物精灵图设置：
因为人物的动作较多，因此设置精灵图的时候，对位置比较讲究。通过人物内部的属性比如人物速度，最大速度，是否在陆地，人物朝向来改变人物的精灵图，因为我使用的if条件，因此权重大的if需要放到偏前面的位置，避免放到后面被前面的覆盖。

UI_UpPlayer.qml:
在主界面中加入人物升级的页面，升级需要对应的金币，每升一级，都会改变人物对应的属性，同时提高当前技能的金币消耗量，当金币不够的时候无法升级，并且显示文字变红。每一项的技能都有会被保存，用于升级的金币数量也会被保存，用于重置。技能的冷却升级如果过大，使技能冷却时间变为负数会导致技能无法释放，因此增加了技能的最大升级次数。
Scrollview组件可以在有限的空间中放入多种技能，通过滑动鼠标轮滑可以实现上下滚动的效果。

SkillIcon.qml：
设置技能图标的样式，根据属性值allDurating来获取技能时间，startrust获取技能是否可以释放，type获取技能类型，技能的冷却动画就通过allDurating和startrust来实现。

Monster_Sprite.qml:
用于设置怪物的精灵图，其中有target可以设置怪物的编号，对应不同的怪物精灵图，但是最终因为怪物的精灵图大小不一样，导致实现过于复杂。

BlueRectangle.qml：最初用于人物的显示，当人物使用精灵图后就隐藏了

CheckCollision.qml：碰撞面积的设置，主要用于人物，Qt..rect(0,0,0,0)用于设置一个正方体，该正方体隐藏不可见

Game_Item.qml：游戏道具组件，使用AnimatedImage来实现动态图片显示，itemType设置道具类型，根据对应的道具类型会触发不一样的效果。itemDuring设置道具持续的时间，theCollision用于设置道具的碰撞面积，getCollision函数获取该道具的碰撞面积

StateIcon.qml：
设置状态的图标样式，实现过程和技能图标设置类似，通过对应的属性，来播放每个状态的持续动画。

UI_Info.qml:
在主界面设置游戏的操作信息。

Player_Sprite.qml:
设置人物的精灵图,部分的动作需要设置to,用于回到默认动作，比如待机动作。

Player_Skill_Sprite.qml:
设置人物的技能精灵图

Platform.qml：
平台组件，作用和Game_Item.qml类似

Player_Attack_Space:
用于设置技能的攻击范围、碰撞面积、技能持续时间，根据释放的方向来变更技能动画

吴华负责的板块：
地图，怪物的设计与应用，失败通关界面，地图切换
一.地图板块(firstmap.qml,secondmap.qml)：设计了first和secondmap两张地图，根据platform和monsters和Game_Items这三个qml文件在地图里面创建具体的平台，怪物，道具金币等

首先在每张地图里面都放入了地图的金币组件，怪物击杀掉落怪物的逻辑，循环放置地图的背景图，使用三个item来分别存储对应的怪物(allmonster)，平台(allplatform)，和道具(allitems)，这样方便在gameview.qml里面进行碰撞检测

怪物道具和平台都进行自己的微调达到一个比较合理的效果

然后是地图的切换，创建了mapcontainer进行地图的切换，根据主界面选择的地图发送信号改变选择地图的值

在gameview.qml里面放置了themap的地图用于存储角色和地图，方便切换地图

二.怪物板块（monsters.qml）：怪物首先有基本的巡逻范围，巡逻速度，怪物还有追击范围，怪物还有碰撞大小和类型

根据不同的怪物使用不同的精灵图进行使用对应的动作，怪物的转向逻辑，巡逻逻辑和暂停逻辑

关底boss的设计，创建了一个单独的timer进行管理boss,当走到靠近一定范围发起攻击，攻击的枝条叫root类型的怪物，同时添加了预警红色警示，根据外部绑定的玩家位置进行跟踪提示枝条的攻击位置，基本的怪物停顿，还有枝条的攻击之后的消失与返回

怪物类型分成normal绿色基本怪物,bat蝙蝠，end2boss紫色怪物，end1boss鬼树

怪物碰撞，之间调用了地图里面的allmonster进行和人物的碰撞检测，实现上下左右碰撞的基本逻辑

三.游戏失败（GM_GameFail.qml）:当玩家生命归0弹出，可以让玩家选择重新开始或者返回主菜单，点击重新开始之后或者返回主菜单就会刷新全部的怪物，道具和金币,具体在gameview.qml里面创建的game_fail对象，接受了来自main组件的消息进行重新开始和返回主菜单

心得与感受：工作量最大的是地图的设计和怪物安放和道具安放，逻辑最复杂的是怪物和boss的逻辑，怪物什么时候应该正常走，什么时候攻击，巡逻的具体范围，都要自己微调，精灵图的显示往往和实际有出入，也需要微调。
boss的设计，一开始创建的是动态创建枝条攻击玩家，结果碰撞不理想，只好先静态创建好枝条,然后靠近进行碰撞检测攻击，boss的行为，还有基本的预警，锁定玩家的位置这些方面开拓了眼界，了解到了游戏开发并不容易，需要大量的资源图片，做一个boss都不理想，需要更努力的学习新知识

陈海洪负责的板块：
UI_MainMenuPage:
主要设计了，开始游戏，设置，退出游戏三个按钮。
页面背景主要是通过gradient: Gradient给页面的Rectangle提供颜色渐变，通过Repeater设置粒子效果，SequentialAnimation on opacity设置每个粒子的不透明度的淡出。
页面飘落的“星星”是通过SequentialAnimation on y设置xNumberAnimation的每次都从顶部下落，下落过程中有一个加速到减速的过程（easing.type: Easing.InOutQuad），SequentialAnimation on x设置NumberAnimation的左右偏移，以及偏移速度。

UI_ModeSelectPage：
包含冒险模式，小游戏，设置，返回主菜单四个按钮。
冒险模式：鼠标放到按钮上有一个按钮背景不透明度的变化过程（opacity: startButton.hovered ? 0.5 : 0）。当点击按钮后有一个按钮背景颜色的变化。
小游戏：这个是一个在短时间收集金币的小游戏。如果金币不足就会弹出一个Err模态对话框，繁殖则进入小游戏界面。
设置：主要是设置游戏里的背景音乐，界面和游戏的音效，以及总声音的大小。

UI_GamePage:
包含当前模式的一个名字，地图的选择，以及开始游戏，设置，返回主菜单三个按钮
地图选择：

SettingDialog：
垂直布局音量设置和按钮区域，间距为15像素。音量设置组（GroupBox）包含三个每个音量控制(主音量、音效、背景音乐)，它们都有相同的结构，他们都是水平布局（lable和slider和当前音量
每个音量组的名字，滑块，当前音量都是统一颜色的。每个滑块轨道底色都是灰色的，当点击handle滑块手柄时滑块颜色变浅。
按钮区域：对话框底部按钮标准容器（footer:DialogButtonBox）包含返回主菜单，应用，取消三个按钮
         返回主菜单。点击是弹出顶部页面，其他页面不可见
         应用。默认为完全透明，当按下时（down）为实心蓝色，鼠标悬停时（hovered）为浅蓝色半透明背景。点击时给UI_MainMenu中的创建的settingDialog发送mu()和setting（）信号，处理mu（）为点击音效，处理setting（）信号又发送csetting()，rootsetting()信号，这两个信号都在Main.qml中的ui_main接收，都初始三个音量

UI_Main：
定义所有组件页面，用堆叠式页面导航他们， 键盘快捷键"Esc"返回上一页（if (stackView.depth > 1) stackView.pop()），在每个组件中处理按键音效信号。

Gold.qml：
金币3秒后消失，2秒后开始闪烁。点击金币后发出粒子效果和音效消失。

CollectCoin.qml：
游戏界面背景设置（gradient颜色渐变）和返回主菜单按钮（通过可见性）以及游戏结束后（Timer 10秒后）收集数目的显示。
随机生成金币generateCoin()，并根据金币大小统计金币数目。

Err.qml：
当金币不足20个点击小游戏时就会显示这个对话框。
背景。gradient颜色渐变，delegate实现矩形随机在上部出现，下落后又到顶部，无限重复。
文字。通过偏移文字（horizontalCenterOffset和verticalCenterOffset）实现文字的阴影层 透明度比主文字高。




